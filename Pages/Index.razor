@page "/";
@inject TimerRepostory repo


<h3>Timer</h3>

<div>
  <label for="hourInput">Hours:</label>
  <input id="hourInput" type="number" @bind="Hours" min="0" />

  <label for="minuteInput">Minutes:</label>
  <input id="minuteInput" type="number" @bind="Minutes" min="0" max="59" />

  <label for="secondInput">Seconds:</label>
  <input id="secondInput" type="number" @bind="Seconds" min="0" max="59" />

  <button @onclick="StartTimer" disabled="@IsRunning">Start</button>
  <button @onclick="PauseTimer" disabled="@(IsRunning == false)">Pause</button>
</div>

<p>Time left: @FormattedTimeLeft</p>
<p>Started at: @StartedAt?.ToString("HH:mm:ss")</p>
<p>Ends at: @EndsAt?.ToString("HH:mm:ss")</p>

<!-- Progress bar -->
<div class="progress-container">
  <div class="progress-bar" style="width: @ProgressPercentage%;"></div>
</div>
<h4>Timer History</h4>
<ul>
  @foreach (var record in TimerHistory)
  {
    <li>Started: @(record.Start.Value.ToString("yyyy-MM-dd HH:mm:ss")), Ended: @(record.End.Value.ToString("yyyy-MM-dd HH:mm:ss"))</li>
  }
</ul>
<style>
  .progress-container {
  width: 100%;
  background-color: #e0e0e0;
  border-radius: 5px;
  margin: 20px 0;
  height: 30px;
  }

  .progress-bar {
  height: 100%;
  background-color: #4caf50;
  text-align: center;
  line-height: 30px;
  color: white;
  border-radius: 5px;
  transition: width 0.5s ease-in-out;
  }
</style>

@code {
  private int Hours = 0;
  private int Minutes = 0;
  private int Seconds = 0;
  private int TotalSeconds;
  private DateTime? StartedAt;
  private DateTime? EndsAt;
  private bool IsRunning;
  private System.Timers.Timer? _timer;
  private List<TimerRecord> TimerHistory = new();

  private string FormattedTimeLeft => $"{TotalSeconds / 3600:D2}:{(TotalSeconds % 3600) / 60:D2}:{TotalSeconds % 60:D2}";

  private double ProgressPercentage => TotalSeconds > 0 ? (1.0 - (double)TotalSeconds / (Hours * 3600 + Minutes * 60 + Seconds)) * 100 : 0;


  protected override async  Task OnInitializedAsync()
  {
    TimerHistory =  repo.GetTimerHistory().ToList();
    StateHasChanged();
  }

  private void StartTimer()
  {
    TotalSeconds = Hours * 3600 + Minutes * 60 + Seconds;
    StartedAt = DateTime.Now;
    EndsAt = StartedAt?.AddSeconds(TotalSeconds);
    IsRunning = true;

    _timer = new System.Timers.Timer(1000);
    _timer.Elapsed += (sender, e) =>
    {
      if (TotalSeconds > 0)
      {
        TotalSeconds--;
        InvokeAsync(StateHasChanged);
      }
      else
      {
        _timer?.Stop();
        IsRunning = false;
        SaveTimerRecord();
        InvokeAsync(StateHasChanged);
      }
    };
    _timer.Start();
  }

  private void PauseTimer()
  {
    _timer?.Stop();
    IsRunning = false;
  }

  private void SaveTimerRecord()
  {
     repo.Save(new TimerRecord { Start = StartedAt, End = EndsAt });
    TimerHistory =  repo.GetTimerHistory().ToList();


   }
}


