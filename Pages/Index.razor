@page "/";
@using ActualLab.Fusion.Blazor
@using ActualLab.Fusion.Extensions
@inherits ComputedStateComponent<TimerState>
@inject TimerService service
@inject IFusionTime Time
@{
    var state = State.ValueOrDefault;
}

<h3>Timer</h3>


@if (state is not null)
{

    <div>
        <label for="hourInput">Hours:</label>
        <input id="hourInput" type="number" @bind="Hours" min="0" />

        <label for="minuteInput">Minutes:</label>
        <input id="minuteInput" type="number" @bind="Minutes" min="0" max="59" />

        <label for="secondInput">Seconds:</label>
        <input id="secondInput" type="number" @bind="Seconds" min="0" max="59" />

        <button @onclick="StartTimer" disabled="@state.IsRunning">Start</button>
        <button @onclick="PauseTimer" disabled="@(state.IsRunning == false)">Pause</button>
    </div>

    @if (state.FormattedTimeLeft is not null)
    {
        <p>Time left: @state.FormattedTimeLeft</p>
    }
    @if (state.StartedAt is not null)
    {
        <p>Started at: @state.StartedAt?.ToString("HH:mm:ss")</p>
    }
    @if (state.EndsAt is not null)
    {
        <p>Ends at: @state.EndsAt?.ToString("HH:mm:ss")</p>
    }
    @if (state.ProgressPercentage is not null)
    {
        <!-- Progress bar -->
        <div class="progress-container">
            <div class="progress-bar" style="width: @state.ProgressPercentage%;"></div>
        </div>
    }
    @if (state.TimerHistory is not null)
    {
        <h4>Timer History</h4>
        <ul>
            @foreach (var record in state.TimerHistory)
            {
                <li>Started: @(record.Start.Value.ToString("yyyy-MM-dd HH:mm:ss")
               ), Ended: @(record.End.Value.ToString("yyyy-MM-dd HH:mm:ss")
              )</li>
            }
        </ul>
    }


<style>
    .progress-container {
        width: 100%;
        background-color: #e0e0e0;
        border-radius: 5px;
        margin: 20px 0;
        height: 30px;
    }

    .progress-bar {
        height: 100%;
        background-color: #4caf50;
        text-align: center;
        line-height: 30px;
        color: white;
        border-radius: 5px;
        transition: width 0.5s ease-in-out;
    }
</style>

@code {
    private int Hours = 0;
    private int Minutes = 0;
    private int Seconds = 0;


    protected override async Task<TimerState> ComputeState(CancellationToken cancellationToken)
    {
        var (TimerState, changeTime) = await service.GetTimerState();
        var momentsAgo = await Time.GetMomentsAgo(changeTime);
        return TimerState;
    }
    private async Task StartTimer()
    {
        await service.StartTimer(Hours, Minutes, Seconds);
    }

    private async Task PauseTimer()
    {
        await service.PauseTimer();
    }
}
}


